<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.room.admin.mapper.adminMapper">


<insert id ="notice">
INSERT INTO notice_board (notice_title, notice_content)
		values (#{notice_title}, #{notice_content} )
</insert>
<insert id ="faq">
INSERT INTO faq (faq_title, faq_content,faq_class)
		values (#{faq_title}, #{faq_content} ,#{faq_class})
</insert>

	
	<select id="roomKind" resultType="com.room.admin.dto.RoomKindDTO">
		SELECT *
		FROM room_kind
	</select>


    <!-- 공지사항 검색조건 -->
   <sql id="noticeSearch">
      <if test="searchType != null">
         <if test="searchType == 'notice_title'.toString()">AND notice_title LIKE CONCAT('%',#{keyword},'%')</if>
         <if test="searchType == 'notice_content'.toString()">AND notice_content  LIKE CONCAT('%',#{keyword},'%')</if>
      </if>
   </sql>

   <!-- 공지사항 목록 보기 (Paging 처리) + 검색조건 -->
   <select id="noticePaging" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.admin.dto.BoardDTO">
    <![CDATA[
       SELECT *
        FROM   notice_board 
        WHERE   1=1
    ]]>
      <include refid="noticeSearch"/>
    <![CDATA[
        ORDER BY notice_bno DESC
        LIMIT   #{pageStart}, #{perPageNum}
    ]]>
   </select>
   
   
   	<!-- 전체 공지사항 수 구하기 (Paging 처리) -->
	<select id="noticeTotalCount" resultType="Integer">
    <![CDATA[
        SELECT	count(*)
        FROM	notice_board
        WHERE   1=1
        
    ]]>
      <include refid="noticeSearch"/>
      
	</select>
	    <!-- 공지사항 검색조건 -->
   <sql id="faqSearch">
      <if test="searchType != null">
 		<if test="searchType == 'faq_title'.toString()">AND faq_title LIKE '%' || #{keyword} || '%'</if>
		<if test="searchType == 'faq_content'.toString()">AND faq_content LIKE '%' || #{keyword} || '%'</if>
      </if>
   </sql>

   <!-- 공지사항 목록 보기 (Paging 처리) + 검색조건 -->
   <select id="faqPaging" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.member.dto.FaqDTO">
    <![CDATA[
       SELECT *
        FROM   faq 
        WHERE   1=1
    ]]>
      <include refid="faqSearch"/>
    <![CDATA[
        ORDER BY faq_bno DESC
        LIMIT   #{pageStart}, #{perPageNum}
    ]]>
   </select>
   
   
   	<!-- 전체 공지사항 수 구하기 (Paging 처리) -->
	<select id="faqTotalCount" resultType="Integer">
    <![CDATA[
        SELECT	count(*)
        FROM	faq
        WHERE   1=1
    ]]>
    
	</select>
	
	   <!-- QnA 검색조건 -->
   <sql id="qnaSearch">
      <if test="searchType != null">
         <if test="searchType == 'qna_title'.toString()">AND qna_title LIKE CONCAT('%',#{keyword},'%')</if>
         <if test="searchType == 'qna_content'.toString()">AND qna_content  LIKE CONCAT('%',#{keyword},'%')</if>
      </if>
   </sql>

   <!-- QnA 목록 보기 (Paging 처리) + 검색조건 -->
   <select id="qnaPaging" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.member.dto.QnaDTO">
    <![CDATA[
       SELECT *
        FROM   qna_board 
        WHERE   1=1
    ]]>
      <include refid="qnaSearch"/>
    <![CDATA[
        ORDER BY qna_bno DESC
        LIMIT   #{pageStart}, #{perPageNum}
    ]]>
   </select>
   
   
   	<!-- QnA 수 구하기 (Paging 처리) -->
	<select id="qnaTotalCount" resultType="Integer">
    <![CDATA[
        SELECT	count(*)
        FROM	qna_board
        WHERE   1=1
        
    ]]>
      <include refid="qnaSearch"/>
      
	</select>
	
	
	<!-- 공지사항 상세페이지 -->
	<select id="detailView" parameterType="int" resultType="com.room.admin.dto.BoardDTO">
	SELECT notice_bno,
		   notice_title,
		   notice_content,
		   notice_date
	FROM   notice_board		   
	WHERE  notice_bno = #{notice_bno}
	</select>
	
	<!-- 공지사항 수정 -->
	<update id="noticeUpdate" parameterType="com.room.admin.dto.BoardDTO">
	UPDATE notice_board
	SET notice_title = #{notice_title},
		notice_content = #{notice_content}
	WHERE notice_bno = #{notice_bno}
	</update>
	
	<!-- 공지사항 삭제 -->
	<delete id="noticeDelete" parameterType="int">
	delete from notice_board
	
	WHERE notice_bno = #{notice_bno}
	
	</delete>
	    <!-- 회원 검색조건 -->
	<sql id="membersearch">
		<if test="searchType != null">
			<if test="searchType == 'id'.toString()">AND m_id LIKE CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'name'.toString()">AND m_name LIKE CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'birth'.toString()">AND m_birth  LIKE CONCAT('%',#{keyword},'%')</if>
		</if>
	</sql>
	
    <!-- 전체 회원 수 구하기 (Paging 처리) + 검색조건 -->
	<select id="memberListTotalCount" parameterType="com.room.admin.dto.SearchCriteria" resultType="Integer">
    <![CDATA[
        SELECT	count(*) FROM	member
        WHERE	1=1
    ]]>
		<include refid="membersearch"/>
	</select>

	
	<!-- 회원 목록 보기 (Paging 처리) + 검색조건 -->
	<select id="memberListPaging" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.member.dto.MemberDTO">
    <![CDATA[
        SELECT	*  
        FROM	member 
        WHERE	1=1
        and		m_power!=1
    ]]>
		<include refid="membersearch"/>
    <![CDATA[
        ORDER BY m_bno DESC
        LIMIT	#{pageStart}, #{perPageNum}
    ]]>
	</select>
	
	<!-- 회원번호에 해당하는 정보를 추출한다. -->
	<select id="memberDetail" parameterType="com.room.member.dto.MemberDTO" resultType="com.room.member.dto.MemberDTO">
	SELECT	*
	FROM	member
	WHERE	m_bno		= #{m_bno}
	</select>
	
	<!-- 회원 수정 -->
	<update id="memberUpdate" parameterType="com.room.member.dto.MemberDTO">
    UPDATE 	member
    SET     m_pwd = #{m_pwd},
    		m_name = #{m_name},m_tel = #{m_tel},
    		m_address = #{m_address},
    		m_birth 	=#{m_birth},
    		m_power	=#{m_power}
    WHERE   m_bno     = #{m_bno}
   	</update>
   	 
   	<!-- 회원 삭제 -->
	<delete id="memberDelete" parameterType="com.room.member.dto.MemberDTO">
    DELETE 	
   	FROM	member
    WHERE   m_bno     = #{m_bno}
   	</delete>
   	<!-- 회원 등급 찾기 -->
   	<select id="searchM_power" parameterType="com.room.member.dto.MemberDTO" resultType="Integer">
   	SELECT 	m_power
   	from	member
   	where	m_id	=#{m_id}
   	</select>
   	    <!-- 공지사항 검색조건 -->
   <sql id="paymentSearch">
      <if test="searchType != null">
 		<if test="searchType == 't'.toString()">AND pay_name LIKE '%' || #{keyword} || '%'</if>
		<if test="searchType == 'c'.toString()">AND pay_account LIKE '%' || #{keyword} || '%'</if>
 		<if test="searchType == 'tc'.toString()">AND (pay_name LIKE '%' || #{keyword} || '%') or (pay_account LIKE '%' || #{keyword} || '%')</if>
      </if>
   </sql>

   <!-- 공지사항 목록 보기 (Paging 처리) + 검색조건 -->
   <select id="paymentPaging" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.admin.dto.PaymentDTO">
    <![CDATA[
        SELECT   *  
        FROM   payment 
        WHERE   1=1
    ]]>
      <include refid="paymentSearch"/>
    <![CDATA[
        ORDER BY pay_bno DESC
        LIMIT   #{pageStart}, #{perPageNum}
    ]]>
   </select>
   
   
   	<!-- 전체 공지사항 수 구하기 (Paging 처리) -->
	<select id="paymentTotalCount" resultType="Integer">
    <![CDATA[
        SELECT	count(*)
        FROM	payment
        WHERE   1=1
    ]]>
    
	</select>
	<!-- 결제항목 상세페이지 -->
	<select id="paymentdetailView" parameterType="int" resultType="com.room.admin.dto.PaymentDTO">
	SELECT *
	FROM   payment		   
	WHERE  pay_bno = #{pay_bno}
	</select>

	
	<!-- 결제항목 수정 -->
	<update id="paymentUpdate" parameterType="com.room.admin.dto.PaymentDTO">
	UPDATE payment
	SET pay_name = #{pay_name},
		pay_account = #{pay_account},
		pay_bank = #{pay_bank}
	WHERE pay_bno = #{pay_bno}
	</update>
	<insert id ="payment">
		INSERT INTO payment (pay_name,pay_account,pay_bank)
		values (#{pay_name}, #{pay_account}, #{pay_bank}  )
	</insert>
	
	<!-- 결제항목 삭제 -->
	<delete id="paymentDelete" parameterType="int">
	delete from payment
	
	WHERE pay_bno = #{pay_bno}
	
	</delete>
	<!-- 기능 목록 조회 -->
	<select id="fncList" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.admin.dto.Room_fncDTO">
	select *
	from room_fnc
	</select>
	<!-- 대여 목록 조회 -->
	<select id="rentList" parameterType="com.room.admin.dto.SearchCriteria" resultType="com.room.admin.dto.Room_rentDTO">
	select *
	from room_rent
	</select>
	<insert id ="insertFnc">
		INSERT INTO room_fnc (fnc_name,fnc_price)
		values ( #{fnc_name}, #{fnc_price}  )
	</insert>
	<insert id ="insertRent">
		INSERT INTO room_rent (rent_name,rent_price)
		values (#{rent_name}, #{rent_price})
	</insert>
		<!-- 기능항목 상세페이지 -->
	<select id="fncdetailView" parameterType="int" resultType="com.room.admin.dto.Room_fncDTO">
	SELECT *
	FROM   room_fnc		   
	WHERE  fnc_bno = #{fnc_bno}
	</select>

	
	<!-- 기능항목 수정 -->
	<update id="fncUpdate" parameterType="com.room.admin.dto.Room_fncDTO">
	UPDATE room_fnc
	SET fnc_bno = #{fnc_bno},
		fnc_name = #{fnc_name},
		fnc_price = #{fnc_price}h
	WHERE fnc_bno = #{fnc_bno}
	</update>
		<!-- 대여항목 상세페이지 -->
	<select id="rentdetailView" parameterType="int" resultType="com.room.admin.dto.Room_rentDTO">
	SELECT *
	FROM   room_rent		   
	WHERE  rent_bno = #{rent_bno}
	</select>

	
	<!-- 대여항목 수정 -->
	<update id="rentUpdate" parameterType="com.room.admin.dto.Room_rentDTO">
	UPDATE room_rent
	SET rent_bno = #{rent_bno},
		rent_name = #{rent_name},
		rent_price = #{rent_price}
	WHERE rent_bno = #{rent_bno}
	</update>
		<!-- 기능 삭제 -->
	<delete id="fncDelete" parameterType="int">
	delete from room_fnc
	
	WHERE fnc_bno = #{fnc_bno}
	
	</delete>
		<!-- 대여 삭제 -->
	<delete id="rentDelete" parameterType="int">
	delete from room_rent
	
	WHERE rent_bno = #{rent_bno}
	
	</delete>
	<!-- FAQ 종류 목록 보기 -->
   	<select id="selectFaqType" resultType="com.room.member.dto.FaqTypeDTO" >
    	SELECT * FROM FaqType
    </select>
	
   
	
</mapper>